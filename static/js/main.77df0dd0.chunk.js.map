{"version":3,"sources":["containers/Home/Home.js","components/FormGroup.js","components/RequestForm.js","components/SendPubKeyForm.js","containers/Request/Request.js","containers/Error/Error.js","components/Navigation.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","FormGroup","props","Form","Group","Label","label","Control","type","value","onChange","change","text","Text","RequestForm","Fragment","onSubmit","submit","autoComplete","invalidText","Alert","variant","components_FormGroup","studentName","studentNameChange","studentId","studentIdChange","Button","pubKey","pubKeyChange","diploma","diplomaChange","transcript","transcriptChange","Request","state","requestInvalidText","isRequestSuccess","pubKeyInvalidText","isPubKeySuccess","handleStudentNameChange","event","_this","setState","target","handleStudentIdChange","handleRequestSubmit","preventDefault","axios","post","then","response","res","data","catch","error","console","log","handlePubKeyChange","handleDiplomaChange","checked","handleTranscriptChange","handlePubKeySubmit","alert","history","push","this","SendPubKeyForm","components_RequestForm","Component","Error","Navigation","Navbar","collapseOnSelect","expand","Container","lib","to","Brand","src","width","alt","Toggle","aria-controls","Collapse","id","Nav","Link","Layout","children","App","react_router_dom","src_components_Navigation","components_Layout","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77df0dd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"text-center\">Thammasat University</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst FormGroup = (props) => {\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label>{props.label}</Form.Label>\r\n            <Form.Control type={props.type} value={props.value} onChange={props.change}/>\r\n            {props.text !== '' && <Form.Text className=\"text-muted\">{props.text}</Form.Text>}\r\n        </Form.Group>\r\n    );\r\n};\r\n\r\nexport default FormGroup;","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport FormGroup from './FormGroup';\r\n\r\nconst RequestForm = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Thammasat Blockchain Academic Credential</h1>\r\n            <h4>How to apply for putting your diploma to Blockchain</h4>\r\n            <Form onSubmit={props.submit} className=\"col-md-5\" autoComplete=\"off\">\r\n                { props.invalidText !== '' && <Alert variant=\"danger\">{props.invalidText}</Alert> }\r\n                <FormGroup label=\"Student name\" type=\"text\" text=\"Your student name must contain only letters and must not contain spaces.\" value={props.studentName} change={props.studentNameChange}/>\r\n                <FormGroup label=\"Student ID\" type=\"text\" text=\"Your student id number must be 10 characters long, contain only numbers and must not contain spaces.\" value={props.studentId} change={props.studentIdChange}/>\r\n                <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n                    Send\r\n                </Button>\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RequestForm;","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport FormGroup from './FormGroup';\r\n\r\nconst RequestForm = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Form onSubmit={props.submit} className=\"col-md-6\">\r\n                <h4>Please first download the blockchain wallet from the link</h4>\r\n                <ul>\r\n                    <li>For iOS: <u>https://itunes.apple.com/us/app/blockcerts-wallet/id1146921514?mt=8</u></li>\r\n                    <li>For Android: <u>https://play.google.com/store/apps/details?id=com.learningmachine.android.app&hl=en</u></li>\r\n                </ul>\r\n                <h4>Install it on your phone or computer.</h4>\r\n                <h4>Once you have your public key provide it to us:</h4>\r\n                { props.invalidText !== '' && <Alert variant=\"danger\">{props.invalidText}</Alert> }\r\n                <FormGroup label=\"Public Key\" type=\"text\" value={props.pubKey} change={props.pubKeyChange} />\r\n                <p>Which documents you want ?</p>\r\n                <FormGroup label=\"Diploma\" type=\"checkbox\" value={props.diploma} change={props.diplomaChange} />\r\n                <FormGroup label=\"Transcript\" type=\"checkbox\" value={props.transcript} change={props.transcriptChange} />\r\n                <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n                    Send\r\n                </Button>\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RequestForm;","import React, { Component } from 'react';\r\nimport RequestForm from '../../components/RequestForm';\r\nimport SendPubKeyForm from '../../components/SendPubKeyForm';\r\n// import { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass Request extends Component {\r\n    state = {\r\n        studentName: '',\r\n        studentId: '',\r\n        requestInvalidText: '',\r\n        isRequestSuccess: false,\r\n        pubKey: '',\r\n        diploma: false,\r\n        transcript: false,\r\n        pubKeyInvalidText: '',\r\n        isPubKeySuccess: false\r\n    };\r\n    handleStudentNameChange = (event) => {\r\n        this.setState({\r\n            studentName: event.target.value\r\n        });\r\n    };\r\n    handleStudentIdChange = (event) => {\r\n        this.setState({\r\n            studentId: event.target.value\r\n        });\r\n    };\r\n    handleRequestSubmit = (event) => {\r\n        event.preventDefault();\r\n        axios.post('https://still-badlands-79996.herokuapp.com/request', {\r\n            studentName: this.state.studentName,\r\n            studentId: this.state.studentId\r\n          })\r\n          .then((response) => {\r\n            let res = response.data;\r\n            if(res === 'success') {\r\n                this.setState({ \r\n                    requestInvalidText: '',\r\n                    isRequestSuccess: true\r\n                });\r\n            } else if(res === 'name1') {\r\n                this.setState({ requestInvalidText: 'Student name must contain only English characters'});\r\n            } else if(res === 'id1') {\r\n                this.setState({ requestInvalidText: 'Student ID must contain only number'});                \r\n            } else if(res === 'id2') {\r\n                this.setState({ requestInvalidText: 'Student ID must consisting of 10 digits'});                \r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n    };\r\n    handlePubKeyChange = (event) => {\r\n        this.setState({\r\n            pubKey: event.target.value\r\n        });\r\n    };\r\n    handleDiplomaChange = (event) => {\r\n        this.setState({\r\n            diploma: event.target.checked\r\n        });\r\n    };\r\n    handleTranscriptChange = (event) => {\r\n        this.setState({\r\n            transcript: event.target.checked\r\n        });\r\n    };\r\n    handlePubKeySubmit = (event) => {\r\n        event.preventDefault();\r\n        axios.post('https://still-badlands-79996.herokuapp.com/pubKey', {\r\n            pubKey: this.state.pubKey,\r\n            diploma: this.state.diploma,\r\n            transcript: this.state.transcript\r\n          })\r\n          .then((response) => {\r\n            let res = response.data;\r\n            if(res === 'success') {\r\n                this.setState({\r\n                    pubKeyInvalidText: '',\r\n                    isPubKeySuccess: true\r\n                });\r\n                alert('Success');\r\n                this.props.history.push('/blockchain-project');\r\n            } else if(res === 'err1') {\r\n                this.setState({\r\n                    pubKeyInvalidText: 'Public Key Invalid'\r\n                });\r\n            } else if(res === 'err2') {\r\n                this.setState({\r\n                    pubKeyInvalidText: 'You have to choose either diploma or transcript'\r\n                });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.isRequestSuccess ?\r\n                    <SendPubKeyForm \r\n                        pubKey={this.state.pubKey}\r\n                        diploma={this.state.diploma}\r\n                        transcript={this.state.transcript}\r\n                        pubKeyChange={this.handlePubKeyChange}\r\n                        diplomaChange={this.handleDiplomaChange}\r\n                        transcriptChange={this.handleTranscriptChange}\r\n                        submit={this.handlePubKeySubmit}\r\n                        invalidText={this.state.pubKeyInvalidText}\r\n                    />\r\n                    :\r\n                    <RequestForm \r\n                        studentName={this.state.studentName}\r\n                        studentId={this.state.studentId}\r\n                        studentNameChange={this.handleStudentNameChange}\r\n                        studentIdChange={this.handleStudentIdChange}\r\n                        submit={this.handleRequestSubmit}\r\n                        invalidText={this.state.requestInvalidText}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Request;","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div>\r\n            <h1>Path doesn't exist !!</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\nimport { Nav, Navbar, Container } from 'react-bootstrap';\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-header mb-5\">\r\n            <Container>\r\n                <LinkContainer to=\"/blockchain-project\">\r\n                    <Navbar.Brand className=\"navbar-logo p-0 m-0\"><img src=\"http://www.tu.ac.th/uploads/main-logo.svg\" width=\"75%\" alt=\"\" /></Navbar.Brand>\r\n                </LinkContainer>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" className=\"toggle-button p-0\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto text-center link\">\r\n                        <LinkContainer to=\"/blockchain-project\"><Nav.Link>HOME</Nav.Link></LinkContainer>\r\n                        <LinkContainer to=\"/blockchain-project/request\"><Nav.Link>REQUEST</Nav.Link></LinkContainer>\r\n                        <LinkContainer to=\"#\"><Nav.Link>VERIFY</Nav.Link></LinkContainer>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <Container>{props.children}</Container>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Home from './containers/Home/Home';\nimport Request from './containers/Request/Request';\nimport Error from './containers/Error/Error';\nimport Navigation from './components/Navigation';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navigation />\n      <Layout>\n        <Switch>\n          <Route path=\"/blockchain-project\" component={Home} exact/>\n          <Route path=\"/blockchain-project/request\" component={Request}/>\n          <Route component={Error}/>\n        </Switch>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}